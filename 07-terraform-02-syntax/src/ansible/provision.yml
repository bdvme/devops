---

  - hosts: nodes
    become: yes
    become_user: root
    remote_user: vagrant
    vars:
      proxy_env:
        http_proxy: socks5://127.0.0.1:9050
        https_proxy: socks5://127.0.0.1:9050
      yc_env:
        yandex_token: "token"
        yandex_zone: "zone"
        yandex_cloud_id: "cloud-id"
        yandex_folder_id: "folder-id"
        yandex_image_id: "image-id"
        yandex_service_acc: "service-acc"

    tasks:
      - name: Create directory for ssh-keys
        file: state=directory mode=0700 dest=/root/.ssh/

      - name: Adding rsa-key in /root/.ssh/authorized_keys
        copy: src=~/.ssh/id_rsa.pub dest=/root/.ssh/authorized_keys owner=root mode=0600
        ignore_errors: yes

      - name: Adding rsa-key in /root/.ssh
        command: "{{ item }}"
        with_items:
          - "rm -rf /root/.ssh"
          - "ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa"
        ignore_errors: yes

      - name: Clear /etc/apt/apt.conf.d/01proxy file
        shell: "echo > /etc/apt/apt.conf.d/01proxy"

      - name: Set default state /etc/apt/sources.list
        copy:
          src: stack/etc/apt/sources.list
          dest: /etc/apt/
          owner: root
          group: root
          mode: 0644
        become: true

      - name: Checking DNS
        command: host -t A google.com

      - name: Installing tools
        apt: >
          package={{ item }}
          state=present
          update_cache=yes
        with_items:
          - git
          - unzip
          - curl
          - gnupg
          - software-properties-common
          - tor
          - obfs4proxy
          - jq

      - name: Synchronization
        copy:
          src: stack/
          dest: "/"
          owner: root
          group: root
          mode: 0644
        become: true

      - name: Enable Tor network
        command: "{{ item }}"
        with_items:
          - "systemctl enable tor"
          - "systemctl start tor"
          - "sleep 30"
        environment: "{{ proxy_env }}"
        register: shell_output

      - name: Checking IP
        command: "curl ifconfig.me"
        environment: "{{ proxy_env }}"
        register: shell_output

      - debug: var=shell_output.stdout

      - name: Add HashiCorp GPG key
        shell: curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
        environment: "{{ proxy_env }}"

      - name: Add HashiCorp linux repository
        shell: apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        environment: "{{ proxy_env }}"

      - name: Installing tools
        apt: >
          package={{ item }}
          state=present
          update_cache=yes
        with_items:
          - terraform
          - packer
        environment: "{{ proxy_env }}"
        timeout: 3600

      - name: Install Yandex Cloud
        command: "{{ item }}"
        with_items:
          - "curl -s -O https://storage.yandexcloud.net/yandexcloud-yc/install.sh"
          - "chmod u+x install.sh"
          - "sudo ./install.sh -a -i /usr/local/ 2>/dev/null"
          - "rm -rf install.sh"
          - "sudo sed -i '$ a source /usr/local/completion.bash.inc' /etc/profile"
        args:
          chdir: "/opt/"
        timeout: 3600

      - name: Terraform initialize
        command: "terraform init -force-copy"
        args:
          chdir: "/opt/terraform"
        environment: "{{ proxy_env }}"

      - name: Yandex Cloud set profile
        command: "{{ item }}"
        with_items:
          - "yc config profile create default"
          - "yc config set folder-id {{ yandex_folder_id }}"
          - "yc config set cloud-id {{ yandex_cloud_id }}"
          - "yc config set token {{ yandex_token }}"
          - "yc config set compute-default-zone {{ yandex_zone }}"
          - "yc config profile activate default"
        environment: "{{ yc_env }}"
        ignore_errors: true
        no_log: true

      - name: Create Yandex Cloud service account
        command: "yc iam service-account create --name {{ yandex_service_acc }}"
        ignore_errors: true

      - name: Create Yandex Cloud key.json
        command: "{{ item }}"
        with_items:
          - "rm -rf key.json"
          - "yc iam key create --service-account-name {{ yandex_service_acc }} --output key.json"
          - "yc config set service-account-key key.json"
        args:
          chdir: "/opt/terraform"
        ignore_errors: true

      - name: Create image on the Yandex Cloud
        command: "bash create_image.sh"
        args:
          chdir: "/opt/packer"
        timeout: 3600

      - name: Get image-id
        command: "yc compute image list --format yaml"
        register: image_id

      - debug:
          msg: "{{ image_id.stdout_lines[0]}}"

      - name: Grep variable
        shell:
          cmd: "echo {{ image_id.stdout_lines[0]}} | awk '{print $3}'"
        register: image_id

      - name: Set variable yandex_image_id
        set_fact:
          yandex_image_id: "{{ image_id.stdout }}"

      - debug:
          msg: "{{ yandex_image_id }}"

      - name: Create infrastructure
        command: terraform apply -auto-approve \
                                -var="yandex_folder_id={{ yandex_folder_id }}" \
                                -var="yandex_cloud_id={{ yandex_cloud_id }}" \
                                -var="yandex_image_id={{ yandex_image_id }}"
        args:
          chdir: "/opt/terraform"
        environment: "{{ yc_env }}"
        timeout: 3600

      - name: Delete image on the Yandex Cloud
        command: "bash erase.sh packer"
        args:
          chdir: "/opt/packer"
        timeout: 3600
